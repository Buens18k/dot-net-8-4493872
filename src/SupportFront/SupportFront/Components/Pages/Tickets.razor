@page "/tickets/{moi?}"
@attribute [StreamRendering(true)]
@using Support
@using Microsoft.AspNetCore.Identity
@using SupportFront.Data

@inject AuthenticationStateProvider auth
@inject UserManager<ApplicationUser> userManager
@inject ISupportService support

<PageTitle>Tickets</PageTitle>

<h1>Tickets</h1>

<p>This component demonstrates showing data.</p>

@if (tickets == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <nav class="nav nav-tabs">
        <NavLink href="/tickets" class="nav-link" aria-current="page" Match="NavLinkMatch.All">Tout</NavLink>
        <AuthorizeView>
            <NavLink href="/tickets/moi" class="nav-link" aria-current="page" >Mes tickets</NavLink>
        </AuthorizeView>
    </nav>  
    <table class="table">
    <thead>
        <tr>
            <th>Date</th>
            <th>Titre</th>
            <th>Email</th>
            <th>Statut</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var t in tickets)
        {
            <tr>
                <td>@t.Cree.ToShortDateString()</td>
                <td>@t.Titre</td>
                <td>@t.Email</td>
                <td>@t.EtatCourant</td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private IEnumerable<Ticket>? tickets;

    protected override async Task OnInitializedAsync()
    {
        tickets = await support.GetTicketsAsync();
        if (Moi is not null)
        {
            var etat = await auth.GetAuthenticationStateAsync();
            var utilisateur = await userManager.GetUserAsync(etat.User);

            if (utilisateur is not null)
            {
                tickets = tickets.Where(t => t.Email == utilisateur.Email);
            }
        }
    }

    [Parameter]
    public string? Moi { get; set; }
}
